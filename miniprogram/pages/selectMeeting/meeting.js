"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const request_service_1 = require("../../services/request-service");
Page({
    data: {
        scrollHeight: '',
        isArea: false,
        region: [],
        regionIndex: '',
        id: '',
        titleMeeting: '',
        startTime: false,
        endTime: false,
    },
    onLoad: function (option) {
        const that = this;
        that.setData({
            id: option.id
        });
        if (option.id == 1) {
            that.setData({
                isArea: false
            });
            that.getTitleMeeting();
            wx.setNavigationBarTitle({
                title: '专题双选会'
            });
        }
        else {
            that.setData({
                isArea: true
            });
            that.getTitleMeeting();
            wx.setNavigationBarTitle({
                title: '区域招聘会'
            });
        }
        that.getRegion();
    },
    onReady: function () {
        const that = this;
        that.computeScrollViewHeight();
    },
    onShow: function () {
    },
    onHide: function () {
    },
    onUnload: function () {
    },
    onPullDownRefresh: function () {
    },
    onReachBottom: function () {
    },
    onShareAppMessage: function () {
    },
    getTitleMeeting() {
        const that = this;
        const business = that.data.id;
        request_service_1.requestService.get("dualSelectType/dualSelects/", { business }, {}, true, true)
            .then(res => {
            console.log(res);
            that.setData({
                titleMeeting: res.data.data
            });
        });
    },
    computeScrollViewHeight() {
        const that = this;
        let query = wx.createSelectorQuery();
        query.select('.timeBox').boundingClientRect();
        query.exec(res => {
            let timeSelectHeight = res[0].height;
            let windowHeight = wx.getSystemInfoSync().windowHeight;
            let scrollHeight = windowHeight - timeSelectHeight;
            that.setData({
                scrollHeight: scrollHeight
            });
        });
    },
    bindRegionChange(event) {
        console.log('event', event.detail);
        const that = this;
        that.setData({
            regionIndex: event.detail.value
        });
        const business = that.data.region[event.detail.value];
        request_service_1.requestService.get('dualSelect/address/', { business }, {}, true, true)
            .then(res => {
            that.setData({
                titleMeeting: res.data.data
            });
        });
    },
    getRegion() {
        const that = this;
        request_service_1.requestService.get('dualSelect/address', {})
            .then(res => {
            that.setData({
                region: res.data.data
            });
        });
    },
    clickAsc(event) {
        const that = this;
        let info = event.currentTarget.dataset.info;
        if (info) {
            that.setData({
                startTime: false,
                endTime: !that.data.endTime,
            });
            const business = that.data.id + '/time/expirationDate/asc';
            request_service_1.requestService.get("dualSelect/dualSelectType/", { business }, {}, true, true)
                .then(res => {
                that.setData({
                    titleMeeting: res.data.data
                });
            });
        }
        else {
            that.setData({
                startTime: !that.data.startTime,
                endTime: false,
            });
            const business = that.data.id + '/time/startDate/asc';
            request_service_1.requestService.get("dualSelect/dualSelectType/", { business }, {}, true, true)
                .then(res => {
                that.setData({
                    titleMeeting: res.data.data
                });
            });
        }
    },
    toMore(event) {
        let info = event.currentTarget.dataset.info;
        const sendData = JSON.stringify(this.data.titleMeeting[info]);
        wx.navigateTo({
            url: 'meetingMore?data=' + sendData
        });
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVldGluZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1lZXRpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxvRUFBOEQ7QUFFOUQsSUFBSSxDQUFDO0lBS0gsSUFBSSxFQUFFO1FBQ0YsWUFBWSxFQUFDLEVBQUU7UUFDZixNQUFNLEVBQUMsS0FBSztRQUdaLE1BQU0sRUFBQyxFQUFFO1FBQ1QsV0FBVyxFQUFDLEVBQUU7UUFDZCxFQUFFLEVBQUMsRUFBRTtRQUNMLFlBQVksRUFBQyxFQUFFO1FBQ2YsU0FBUyxFQUFDLEtBQUs7UUFDZixPQUFPLEVBQUMsS0FBSztLQUNoQjtJQUtELE1BQU0sRUFBRSxVQUFVLE1BQVU7UUFDeEIsTUFBTSxJQUFJLEdBQUcsSUFBVyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDVCxFQUFFLEVBQUMsTUFBTSxDQUFDLEVBQUU7U0FDZixDQUFDLENBQUM7UUFDSCxJQUFJLE1BQU0sQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUM7Z0JBQ1QsTUFBTSxFQUFDLEtBQUs7YUFDZixDQUFDLENBQUM7WUFDSCxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7WUFDdkIsRUFBRSxDQUFDLHFCQUFxQixDQUFDO2dCQUNyQixLQUFLLEVBQUUsT0FBTzthQUNqQixDQUFDLENBQUM7U0FDTjthQUFLO1lBQ0YsSUFBSSxDQUFDLE9BQU8sQ0FBQztnQkFDVCxNQUFNLEVBQUMsSUFBSTthQUNkLENBQUMsQ0FBQztZQUNILElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztZQUN2QixFQUFFLENBQUMscUJBQXFCLENBQUM7Z0JBQ3JCLEtBQUssRUFBRSxPQUFPO2FBQ2pCLENBQUMsQ0FBQztTQUNOO1FBQ0MsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBRXZCLENBQUM7SUFLRCxPQUFPLEVBQUU7UUFDTCxNQUFNLElBQUksR0FBRyxJQUFXLENBQUM7UUFDekIsSUFB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Q0FBQyxLQUFTO1FBQ2QsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO1FBQzVDLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUM5RCxFQUFFLENBQUMsVUFBVSxDQUFDO1lBQ1YsR0FBRyxFQUFDLG1CQUFtQixHQUFDLFFBQVE7U0FDbkMsQ0FBQyxDQUFBO0lBQ0osQ0FBQztDQUNKLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIG1pbmlwcm9ncmFtL3BhZ2VzL3NlbGVjdE1lZXRpbmcvbWVldGluZy5qc1xyXG5pbXBvcnQge3JlcXVlc3RTZXJ2aWNlfSBmcm9tIFwiLi4vLi4vc2VydmljZXMvcmVxdWVzdC1zZXJ2aWNlXCI7XHJcblxyXG5QYWdlKHtcclxuXHJcbiAgLyoqXHJcbiAgICog6aG16Z2i55qE5Yid5aeL5pWw5o2uXHJcbiAgICovXHJcbiAgZGF0YToge1xyXG4gICAgICBzY3JvbGxIZWlnaHQ6JycsXHJcbiAgICAgIGlzQXJlYTpmYWxzZSxcclxuICAgICAgLy8gcmVnaW9uOiBbJ+W5v+S4nOecgScsICflub/lt57luIInLCAn5rW354+g5Yy6J10sXHJcbiAgICAgIC8vIGN1c3RvbUl0ZW06ICflhajpg6gnLFxyXG4gICAgICByZWdpb246W10sXHJcbiAgICAgIHJlZ2lvbkluZGV4OicnLFxyXG4gICAgICBpZDonJyxcclxuICAgICAgdGl0bGVNZWV0aW5nOicnLFxyXG4gICAgICBzdGFydFRpbWU6ZmFsc2UsXHJcbiAgICAgIGVuZFRpbWU6ZmFsc2UsXHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICog55Sf5ZG95ZGo5pyf5Ye95pWwLS3nm5HlkKzpobXpnaLliqDovb1cclxuICAgKi9cclxuICBvbkxvYWQ6IGZ1bmN0aW9uIChvcHRpb246YW55KSB7XHJcbiAgICAgIGNvbnN0IHRoYXQgPSB0aGlzIGFzIGFueTtcclxuICAgICAgdGhhdC5zZXREYXRhKHtcclxuICAgICAgICAgIGlkOm9wdGlvbi5pZFxyXG4gICAgICB9KTtcclxuICAgICAgaWYgKG9wdGlvbi5pZCA9PSAxKSB7XHJcbiAgICAgICAgICB0aGF0LnNldERhdGEoe1xyXG4gICAgICAgICAgICAgIGlzQXJlYTpmYWxzZVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICB0aGF0LmdldFRpdGxlTWVldGluZygpO1xyXG4gICAgICAgICAgd3guc2V0TmF2aWdhdGlvbkJhclRpdGxlKHtcclxuICAgICAgICAgICAgICB0aXRsZTogJ+S4k+mimOWPjOmAieS8midcclxuICAgICAgICAgIH0pO1xyXG4gICAgICB9ZWxzZSB7XHJcbiAgICAgICAgICB0aGF0LnNldERhdGEoe1xyXG4gICAgICAgICAgICAgIGlzQXJlYTp0cnVlXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIHRoYXQuZ2V0VGl0bGVNZWV0aW5nKCk7XHJcbiAgICAgICAgICB3eC5zZXROYXZpZ2F0aW9uQmFyVGl0bGUoe1xyXG4gICAgICAgICAgICAgIHRpdGxlOiAn5Yy65Z+f5oub6IGY5LyaJ1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgICAgICB0aGF0LmdldFJlZ2lvbigpO1xyXG5cclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiDnlJ/lkb3lkajmnJ/lh73mlbAtLeebkeWQrOmhtemdouWIneasoea4suafk+WujOaIkFxyXG4gICAqL1xyXG4gIG9uUmVhZHk6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgY29uc3QgdGhhdCA9IHRoaXMgYXMgYW55O1xyXG4gICAgICB0aGF0LmNvbXB1dGVTY3JvbGxWaWV3SGVpZ2h0KCk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICog55Sf5ZG95ZGo5pyf5Ye95pWwLS3nm5HlkKzpobXpnaLmmL7npLpcclxuICAgKi9cclxuICBvblNob3c6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICog55Sf5ZG95ZGo5pyf5Ye95pWwLS3nm5HlkKzpobXpnaLpmpDol49cclxuICAgKi9cclxuICBvbkhpZGU6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICog55Sf5ZG95ZGo5pyf5Ye95pWwLS3nm5HlkKzpobXpnaLljbjovb1cclxuICAgKi9cclxuICBvblVubG9hZDogZnVuY3Rpb24gKCkge1xyXG5cclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiDpobXpnaLnm7jlhbPkuovku7blpITnkIblh73mlbAtLeebkeWQrOeUqOaIt+S4i+aLieWKqOS9nFxyXG4gICAqL1xyXG4gIG9uUHVsbERvd25SZWZyZXNoOiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIOmhtemdouS4iuaLieinpuW6leS6i+S7tueahOWkhOeQhuWHveaVsFxyXG4gICAqL1xyXG4gIG9uUmVhY2hCb3R0b206IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICog55So5oi354K55Ye75Y+z5LiK6KeS5YiG5LqrXHJcbiAgICovXHJcbiAgb25TaGFyZUFwcE1lc3NhZ2U6IGZ1bmN0aW9uICgpOmFueSB7XHJcblxyXG4gIH0sXHJcbiAgICAvLyDmoLnmja5pZOiOt+WPluS4k+mimOWPjOmAieS8muaIluWMuuWfn+WPjOmAieS8mlxyXG4gICAgZ2V0VGl0bGVNZWV0aW5nKCl7XHJcbiAgICAgICAgY29uc3QgdGhhdCA9IHRoaXMgYXMgYW55O1xyXG4gICAgICAgIGNvbnN0IGJ1c2luZXNzID0gdGhhdC5kYXRhLmlkO1xyXG4gICAgICByZXF1ZXN0U2VydmljZS5nZXQoXCJkdWFsU2VsZWN0VHlwZS9kdWFsU2VsZWN0cy9cIix7YnVzaW5lc3N9LHt9LHRydWUsdHJ1ZSlcclxuICAgICAgICAgIC50aGVuKHJlcz0+e1xyXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlcyk7XHJcbiAgICAgICAgICAgICAgdGhhdC5zZXREYXRhKHtcclxuICAgICAgICAgICAgICAgICAgdGl0bGVNZWV0aW5nOnJlcy5kYXRhLmRhdGFcclxuICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICB9KVxyXG4gICAgfSxcclxuICAgIC8vIOiOt+WPluWJqeS9memrmOW6plxyXG4gICAgY29tcHV0ZVNjcm9sbFZpZXdIZWlnaHQoKSB7XHJcbiAgICAgICAgY29uc3QgdGhhdCA9IHRoaXMgYXMgYW55O1xyXG4gICAgICAgIC8vIOi/lOWbnuS4gOS4qiBTZWxlY3RvclF1ZXJ5IOWvueixoeWunuS+i1xyXG4gICAgICAgIGxldCBxdWVyeSA9IHd4LmNyZWF0ZVNlbGVjdG9yUXVlcnkoKTtcclxuICAgICAgICAvLyDlnKjlvZPliY3pobXpnaLkuIvpgInmi6nnrKzkuIDkuKrljLnphY3pgInmi6nlmaggc2VsZWN0b3Ig55qE6IqC54K544CC6L+U5Zue5LiA5LiqIE5vZGVzUmVmIOWvueixoeWunuS+i++8jOWPr+S7peeUqOS6juiOt+WPluiKgueCueS/oeaBr1xyXG4gICAgICAgIHF1ZXJ5LnNlbGVjdCgnLnRpbWVCb3gnKS5ib3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICAvLyDmiafooYzmiYDmnInnmoTor7fmsYLjgILor7fmsYLnu5PmnpzmjInor7fmsYLmrKHluo/mnoTmiJDmlbDnu4TvvIzlnKhjYWxsYmFja+eahOesrOS4gOS4quWPguaVsOS4rei/lOWbnlxyXG4gICAgICAgIHF1ZXJ5LmV4ZWMocmVzID0+IHtcclxuICAgICAgICAgICAgbGV0IHRpbWVTZWxlY3RIZWlnaHQgPSByZXNbMF0uaGVpZ2h0O1xyXG4gICAgICAgICAgICAvLyB3eC5nZXRTeXN0ZW1JbmZvU3luYygpIOWPr+S7peW+l+WIsOiuvuWkh+eahOWQhOenjeS/oeaBr++8jOWFs+S6jumrmOW6pueahOWPguaVsOacieS4pOS4qu+8jOS4gOS4quaYr+Wxj+W5lemrmOW6piBzY3JlZW5IZWlnaHTvvIzkuIDkuKrmmK/lj6/kvb/nlKjnqpflj6Ppq5jluqYgd2luZG93SGVpZ2h044CC5rOo5oSP6K6h566X55qE5pe25YCZ6KaB55SoIHdpbmRvd0hlaWdodO+8jOi/meagt+eul+WHuuadpeeahOmrmOW6puaJjeaYr+WvueeahOOAgnNjcmVlbkhlaWdodOaYr+aJi+acuueahOWxj+W5lemrmOW6pu+8jOWMheWQq+S6huaJi+acuueahOeKtuaAgeagj+WSjOWwj+eoi+W6j+agh+mimOagj+OAglxyXG4gICAgICAgICAgICBsZXQgd2luZG93SGVpZ2h0ID0gd3guZ2V0U3lzdGVtSW5mb1N5bmMoKS53aW5kb3dIZWlnaHQ7XHJcbiAgICAgICAgICAgIGxldCBzY3JvbGxIZWlnaHQgPSB3aW5kb3dIZWlnaHQgLSB0aW1lU2VsZWN0SGVpZ2h0O1xyXG4gICAgICAgICAgICB0aGF0LnNldERhdGEoe1xyXG4gICAgICAgICAgICAgICAgc2Nyb2xsSGVpZ2h0OiBzY3JvbGxIZWlnaHRcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9KVxyXG4gICAgfSxcclxuICAgIC8vIOWcsOWMuumAieaLqeWZqFxyXG4gICAgYmluZFJlZ2lvbkNoYW5nZShldmVudDphbnkpe1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdldmVudCcsZXZlbnQuZGV0YWlsKTtcclxuICAgICAgICBjb25zdCB0aGF0ID0gdGhpcyBhcyBhbnk7XHJcbiAgICAgICAgdGhhdC5zZXREYXRhKHtcclxuICAgICAgICAgICAgcmVnaW9uSW5kZXg6ZXZlbnQuZGV0YWlsLnZhbHVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29uc3QgYnVzaW5lc3MgPSB0aGF0LmRhdGEucmVnaW9uW2V2ZW50LmRldGFpbC52YWx1ZV07XHJcbiAgICAgICAgcmVxdWVzdFNlcnZpY2UuZ2V0KCdkdWFsU2VsZWN0L2FkZHJlc3MvJyx7YnVzaW5lc3N9LHt9LHRydWUsdHJ1ZSlcclxuICAgICAgICAgICAgLnRoZW4ocmVzPT57XHJcbiAgICAgICAgICAgICAgICB0aGF0LnNldERhdGEoe1xyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlTWVldGluZzpyZXMuZGF0YS5kYXRhXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSlcclxuICAgIH0sXHJcbiAgICAvLyDojrflj5bljLrln5/kv6Hmga9cclxuICAgIGdldFJlZ2lvbigpe1xyXG4gICAgICAgIGNvbnN0IHRoYXQgPSB0aGlzIGFzIGFueTtcclxuICAgICAgICByZXF1ZXN0U2VydmljZS5nZXQoJ2R1YWxTZWxlY3QvYWRkcmVzcycse30pXHJcbiAgICAgICAgICAudGhlbihyZXM9PntcclxuICAgICAgICAgICAgICB0aGF0LnNldERhdGEoe1xyXG4gICAgICAgICAgICAgICAgICByZWdpb246cmVzLmRhdGEuZGF0YVxyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfSlcclxuICAgIH0sXHJcbiAgICAvLyDngrnlh7vmjInml7bpl7TmjpLluo9cclxuICAgIGNsaWNrQXNjKGV2ZW50OmFueSl7XHJcbiAgICAgIGNvbnN0IHRoYXQgPSB0aGlzIGFzIGFueTtcclxuICAgICAgICBsZXQgaW5mbyA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5pbmZvO1xyXG4gICAgICAgIC8vIOS4ujDmmK/lvIDlp4vml7bpl7TmjpLluo8gMe+8mue7k+adn+aXtumXtOaOkuW6j1xyXG4gICAgICAgIGlmIChpbmZvKSB7XHJcbiAgICAgICAgICAgIHRoYXQuc2V0RGF0YSh7XHJcbiAgICAgICAgICAgICAgICBzdGFydFRpbWU6ZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBlbmRUaW1lOiF0aGF0LmRhdGEuZW5kVGltZSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGJ1c2luZXNzID0gdGhhdC5kYXRhLmlkICsgJy90aW1lL2V4cGlyYXRpb25EYXRlL2FzYyc7XHJcbiAgICAgICAgICAgIHJlcXVlc3RTZXJ2aWNlLmdldChcImR1YWxTZWxlY3QvZHVhbFNlbGVjdFR5cGUvXCIse2J1c2luZXNzfSx7fSx0cnVlLHRydWUpXHJcbiAgICAgICAgICAgICAgICAudGhlbihyZXM9PntcclxuICAgICAgICAgICAgICAgICAgICB0aGF0LnNldERhdGEoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZU1lZXRpbmc6cmVzLmRhdGEuZGF0YVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICB9ZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIOW8gOWni+aXtumXtOaOkuW6j1xyXG4gICAgICAgICAgICB0aGF0LnNldERhdGEoe1xyXG4gICAgICAgICAgICAgICAgc3RhcnRUaW1lOiF0aGF0LmRhdGEuc3RhcnRUaW1lLFxyXG4gICAgICAgICAgICAgICAgZW5kVGltZTpmYWxzZSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGJ1c2luZXNzID0gdGhhdC5kYXRhLmlkICsgJy90aW1lL3N0YXJ0RGF0ZS9hc2MnO1xyXG4gICAgICAgICAgICByZXF1ZXN0U2VydmljZS5nZXQoXCJkdWFsU2VsZWN0L2R1YWxTZWxlY3RUeXBlL1wiLHtidXNpbmVzc30se30sdHJ1ZSx0cnVlKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4ocmVzPT57XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5zZXREYXRhKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGVNZWV0aW5nOnJlcy5kYXRhLmRhdGFcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIC8vIOi/m+WFpeaLm+iBmOS8mlxyXG4gICAgdG9Nb3JlKGV2ZW50OmFueSl7XHJcbiAgICAgIGxldCBpbmZvID0gZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LmluZm87XHJcbiAgICAgIGNvbnN0IHNlbmREYXRhID0gSlNPTi5zdHJpbmdpZnkodGhpcy5kYXRhLnRpdGxlTWVldGluZ1tpbmZvXSk7XHJcbiAgICAgIHd4Lm5hdmlnYXRlVG8oe1xyXG4gICAgICAgICAgdXJsOidtZWV0aW5nTW9yZT9kYXRhPScrc2VuZERhdGFcclxuICAgICAgfSlcclxuICAgIH1cclxufSkiXX0=